import java.util.*;
//A solution for the 0 - 1 Knapsack problem  
// using dynamic programming 

public class KnapsackExample1 {

	// A solution for the 0 - 1 Knapsack problem  
	// using dynamic programming  
	
	// A utility method, which returns  
	// the maximum of two integers a1 and a2  
	public int maximum(int a1, int a2)  
	{  
	    return (a1 > a2) ? a1 : a2;  
	}  
	// Returns the maximum value that can  
	// be put in a knapsack of capacity C  
	public int maxValueKnapsack(int capacity, int w[], int val[], int l)  
	{  
	int j, wt;  
	int dp[][] = new int[l + 1][capacity + 1];  
	// Filling the table dp[][] in the bottom-up manner  
	for (j = 0; j <= l; j++)  
	{  
	for (wt = 0; wt <= capacity; wt++)  
	{  
	if (j == 0 || wt == 0)  
	{  
	    // base case  
	    dp[j][wt] = 0;  
	}  
	else if (w[j - 1] <= wt)  
	{  
	    // similar the previous approach making two choices   
	    // either exluding or including the items  
	    dp[j][wt] = maximum(val[j - 1] + dp[j - 1][wt - w[j - 1]], dp[j - 1][wt]);  
	}  
	else  
	{  
	    // current capacity of the knapsack does not allow   
	    // this item. The current value is equal to the previous value  
	    dp[j][wt] = dp[j - 1][wt];  
	}  
	}  
	}  
	return dp[j - 1][capacity];  
	}  
	//  main method  
	public static void main(String [] args)  
	{  
	// input arrays  
	Scanner sc = new Scanner(System.in);
	System.out.println("Enter No Of Objects : ");
	int  obj = sc.nextInt();
	
	int values[] = new int[obj] ;  
	int weight[] = new int[obj] ;  
	
	// taking input of weight arrays
	for(int i=0;i<obj ;i++) 
	{
	System.out.println("Enter the Profit"); 
	values[i]=sc.nextInt();
	System.out.println("Enter the weight"); 
	weight[i]=sc.nextInt();
	}
	// capacity of the knapsack  
	System.out.println("Enter the Capacity of Knapsack  :  ");
	int capacity = sc.nextInt();  
	// length of the input arrays  
	int l = values.length;  
	// instantiating the class KnapsackExample  
	KnapsackExample1 knapObj = new KnapsackExample1();  
	// invoking the method maxValueKnapsack()  
	int maxVal = knapObj.maxValueKnapsack(capacity, weight, values, l);  
	// displaying the final result  
	System.out.println("The maximum value is: " + maxVal);  
	}  
	
}
